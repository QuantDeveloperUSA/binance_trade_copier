name: Deploy to Windows VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual deployment

env:
  VPS_HOST: "5.181.5.168"
  VPS_USER: "trader"
  DEPLOY_PATH: "C:/trade_copier"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install sshpass and setup SSH
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Test SSH connection
      run: |
        echo "Testing SSH connection..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo 'SSH connection successful'"
        
    - name: Create deployment directory
      run: |
        echo "Creating deployment directory..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "if not exist ${{ env.DEPLOY_PATH }} mkdir ${{ env.DEPLOY_PATH }}"
        
    - name: Ensure Git is available on VPS
      run: |
        echo "Checking and installing Git if needed..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo === CHECKING GIT INSTALLATION ===
          git --version 2>nul && (
            echo ✅ Git is already installed
            git --version
          ) || (
            echo ❌ Git not found, attempting to install...
            echo Checking if winget is available...
            winget --version 2>nul && (
              echo Installing Git via winget...
              winget install --id Git.Git -e --source winget --silent --accept-package-agreements --accept-source-agreements 2>&1 || echo Git installation via winget failed
            ) || (
              echo Winget not available, checking chocolatey...
              choco --version 2>nul && (
                echo Installing Git via chocolatey...
                choco install git -y 2>&1 || echo Git installation via chocolatey failed
              ) || (
                echo No package manager available for Git installation
                echo Git will need to be installed manually
                echo Continuing with SCP fallback method...
              )
            )
          )
          echo Git availability check completed
        "
        
    - name: Stop Python processes
      run: |
        echo "Stopping any running Python processes..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo Stopping all Python processes...
          taskkill /f /im python.exe 2>nul || echo No Python processes to kill
          taskkill /f /im pythonw.exe 2>nul || echo No Pythonw processes to kill
          timeout /t 3 /nobreak >nul
          echo Process cleanup completed        "
        
    - name: Deploy via Git pull
      run: |
        echo "Deploying latest code via Git pull..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          echo === GIT DEPLOYMENT ===
          echo Current directory: %CD%
          echo.
          echo === CHECKING GIT STATUS ===
          if exist .git (
            echo Git repository found, updating...
            echo Current branch and status:
            git branch 2>nul || echo Git branch command failed
            git status --porcelain 2>nul || echo Git status failed
            echo.
            echo === FETCHING LATEST CHANGES ===
            git fetch origin main 2>&1 || echo Git fetch failed
            echo.
            echo === HARD RESET TO LATEST ===
            echo Performing hard reset to ensure clean state...
            git reset --hard origin/main 2>&1 || echo Git reset failed
            echo.
            echo === CLEANING UNTRACKED FILES ===
            git clean -fd 2>&1 || echo Git clean failed
            echo ✅ Repository updated via Git pull
          ) else (
            echo No Git repository found, initializing fresh clone...
            echo Removing existing files...
            for /f \"delims=\" %%i in ('dir /b /a-d 2^>nul') do del \"%%i\" 2>nul
            for /f \"delims=\" %%i in ('dir /b /ad 2^>nul ^| findstr /v \"^data$\"') do rd /s /q \"%%i\" 2>nul
            echo.
            echo === CLONING REPOSITORY ===
            git clone https://github.com/QuantDeveloperUSA/binance_trade_copier.git temp_clone 2>&1 || (
              echo Git clone failed, falling back to manual download
              goto manual_download
            )
            echo.
            echo === MOVING FILES FROM CLONE ===
            xcopy temp_clone\\*.* . /E /Y /I 2>nul || echo File copy from clone failed
            rd /s /q temp_clone 2>nul || echo Cleanup of temp clone failed
            echo ✅ Repository cloned successfully
          )
          echo.
          echo === DEPLOYMENT VERIFICATION ===
          echo Current commit:
          git log -1 --oneline 2>nul || echo Git log failed
          echo.
          echo Files in deployment directory:
          dir /b
          goto end_deployment
          
          :manual_download
          echo === FALLBACK: MANUAL FILE COPY ===
          echo Git operations failed, manual file copying will be used in next step
          echo This step completed with Git fallback notice
          
          :end_deployment          echo Deployment via Git completed
        "
        
    - name: Fallback deployment if Git failed
      run: |
        echo "Checking if Git deployment was successful, using SCP fallback if needed..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          if exist main.py (
            echo ✅ main.py found - Git deployment appears successful
          ) else (
            echo ❌ main.py not found - Git deployment may have failed
            echo Using SCP fallback deployment...
            exit /b 1
          )
        " || {
          echo "Git deployment failed, using SCP fallback..."
          sshpass -p '${{ secrets.VPS_PASSWORD }}' scp -o StrictHostKeyChecking=no -r ./* ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.DEPLOY_PATH }}/
          echo "SCP fallback deployment completed"
        }
        
    - name: Setup environment and install dependencies
      run: |
        echo "Setting up Python environment and installing dependencies..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=60 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_PATH }} || (echo Failed to change directory && exit 1)
          echo Current directory: %CD%
          echo.
          echo === PYTHON DIAGNOSTICS ===
          python --version || (echo Python not found && exit 1)
          where python || echo Python location not found
          echo.
          echo === FILE CHECK ===
          if exist main.py (
            echo ✅ main.py found
          ) else (
            echo ❌ main.py NOT found
            exit 1
          )
          if exist requirements.txt (
            echo ✅ requirements.txt found
          ) else (
            echo ❌ requirements.txt NOT found
            exit 1
          )
          echo.
          echo === DATA DIRECTORY SETUP ===
          if not exist data mkdir data
          if not exist data\\accounts.json echo {} > data\\accounts.json
          if not exist data\\trades.json echo [] > data\\trades.json  
          if not exist data\\system.json echo {\"copying_active\": false} > data\\system.json
          echo Data files created/verified
          echo.
          echo === DEPENDENCIES ===
          echo Installing Python dependencies...
          python -m pip install -r requirements.txt --upgrade || (
            echo ❌ Pip install failed
            exit 1
          )
          echo ✅ Dependencies installed successfully
          echo.
          echo === SYNTAX AND IMPORT CHECKS ===
          python -c \"import ast; ast.parse(open('main.py').read()); print('✅ Syntax OK')\" || (
            echo ❌ Syntax error in main.py
            exit 1
          )          python -c \"import config, fastapi, uvicorn; print('✅ Core imports OK')\" || (
            echo ❌ Import test failed  
            exit 1
          )
          echo All checks passed successfully
        "
        
    - name: Start server
      run: |
        echo "Starting FastAPI server with auto-restart wrapper..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          echo === STARTING SERVER ===
          echo Checking if server is already running...
          tasklist | findstr python.exe && (
            echo Existing Python processes found - stopping them first
            taskkill /f /im python.exe 2>nul || echo No processes to kill
            timeout /t 3 /nobreak >nul          ) || echo No existing Python processes
          echo.
          echo Starting FastAPI server with wrapper script...
          start /b \"TradeServer\" cmd /c \"windows_server_start.bat automated\"
          echo Server start command issued with Windows-compatible wrapper
          echo Waiting 20 seconds for server startup and stability check...
          timeout /t 20 /nobreak >nul
          echo.
          echo === SERVER STATUS CHECK ===
          tasklist | findstr python.exe && echo ✅ Python process running || echo ❌ No Python process found
          echo.
          echo === SERVER OUTPUT (Last 20 lines) ===
          if exist server_output.log (
            echo Recent server output:
            powershell \"Get-Content server_output.log -Tail 20\"          ) else (
            echo No server output log found
          )
        "
        
    - name: Debug server startup failure
      run: |
        echo "Comprehensive debugging of server startup failure..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          echo === SERVER STARTUP DEBUGGING ===
          echo.
          echo === CURRENT DIRECTORY CONTENTS ===
          dir /b
          echo.
          echo === LOG FILES CHECK ===
          echo Checking for expected log files:
          if exist server_output.log (
            echo ✅ server_output.log found
            echo File size:
            dir server_output.log | findstr server_output.log
            echo Content:
            type server_output.log
          ) else (
            echo ❌ server_output.log NOT found
          )
          echo.
          if exist server_debug.log (
            echo ✅ server_debug.log found
            echo Content:
            type server_debug.log
          ) else (
            echo ❌ server_debug.log NOT found
          )
          echo.
          if exist binance_trade_copier.log (
            echo ✅ binance_trade_copier.log found
            echo Content:
            type binance_trade_copier.log
          ) else (
            echo ❌ binance_trade_copier.log NOT found
          )
          echo.
          echo === STARTUP SCRIPT TESTING ===
          echo Testing if startup scripts exist:
          if exist windows_server_start.bat (
            echo ✅ windows_server_start.bat found
          ) else (
            echo ❌ windows_server_start.bat NOT found - using manual test
            echo === MANUAL PYTHON TEST ===
            echo Testing direct Python execution to create logs:
            timeout 5 python main.py > direct_test.log 2>&1
            if exist direct_test.log (
              echo ✅ Direct main.py execution created log
              echo Content:
              type direct_test.log
            ) else (
              echo ❌ Direct main.py execution failed to create log
            )
          )
          echo.
          echo === PROCESS ANALYSIS ===
          echo Current Python processes:
          tasklist | findstr python.exe || echo No Python processes found
          echo.
          echo === PERMISSIONS AND ENVIRONMENT ===
          echo Testing file creation:
          echo Test > test_file.log && (
            echo ✅ File creation works
            del test_file.log
          ) || echo ❌ File creation failed
          echo.
          echo Current user: %USERNAME%
          echo Current directory: %CD%
        "
        
    - name: Windows system diagnostics
      run: |
        echo "Running comprehensive Windows system diagnostics..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          echo === WINDOWS SYSTEM DIAGNOSTICS ===
          echo.
          echo === USER AND PERMISSIONS ===
          echo Current user: %USERNAME%
          echo Current user SID:
          whoami /user 2>nul || echo whoami command failed
          echo.
          echo === PYTHON ENVIRONMENT DETAILS ===
          python -c \"import sys, os; print('Python executable:', sys.executable); print('Python version:', sys.version); print('Current working directory:', os.getcwd()); print('Python path:', sys.path[:3])\" || echo Python environment check failed
          echo.
          echo === WINDOWS SERVICES AND COM ===
          echo Checking Windows COM security:
          reg query \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Ole\" /s | findstr \"Authentication\" 2>nul || echo COM registry check failed
          echo.
          echo === VISUAL C++ REDISTRIBUTABLES ===
          echo Checking for Visual C++ redistributables:
          reg query \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\" 2>nul | findstr \"Redistributable\" || echo No VC++ redistributables found in registry
          echo.
          echo === WINDOWS EVENT LOGS (Last 5 application errors) ===
          powershell \"Get-EventLog -LogName Application -EntryType Error -Newest 5 | Select-Object TimeGenerated, Source, Message | Format-Table -AutoSize\" 2>nul || echo Event log access failed
          echo.
          echo === DIRECTORY PERMISSIONS ===
          echo Current directory permissions:
          icacls . 2>nul || echo icacls command failed
          echo.
          echo === MANUAL PYTHON TEST ===
          echo Testing direct Python execution:
          python -c \"print('✅ Python direct execution works')\" && echo Python execution successful || echo ❌ Python execution failed
          echo.
          echo Testing imports individually:
          python -c \"import asyncio; print('✅ asyncio OK')\" 2>&1 || echo ❌ asyncio failed
          python -c \"import uvicorn; print('✅ uvicorn OK')\" 2>&1 || echo ❌ uvicorn failed
          python -c \"import fastapi; print('✅ fastapi OK')\" 2>&1 || echo ❌ fastapi failed
          python -c \"import binance; print('✅ binance OK')\" 2>&1 || echo ❌ binance failed
          echo.
          echo === COMPREHENSIVE WINDOWS TEST ===
          python windows_test.py 2>&1 || echo Windows test script failed
        "
        
    - name: Verify deployment and test server
      run: |
        echo "Final verification and comprehensive server health check..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          echo === DEPLOYMENT VERIFICATION ===
          echo Directory contents:
          dir /b
          echo.
          echo === PYTHON PROCESSES (Detailed) ===
          echo All Python processes:
          tasklist | findstr python.exe && echo ✅ Python process found || echo ❌ No Python processes found
          echo.
          echo Command line details:
          wmic process where \"name='python.exe'\" get processid,commandline /format:list 2>nul || echo No Python processes or wmic unavailable
          echo.
          echo === CURRENT SERVER OUTPUT (Last 30 lines) ===
          if exist server_output.log (
            echo Latest server output:
            powershell \"Get-Content server_output.log -Tail 30\"
          ) else (
            echo No server output log found
          )
          echo.
          echo === PORT USAGE CHECK ===
          echo Checking if port 8000 is in use:
          netstat -an | findstr :8000 && echo ✅ Port 8000 is active || echo ❌ Port 8000 not in use
          echo.
          echo === HEALTH CHECK TEST ===
          echo Testing server health endpoint...
          python -c \"import requests; r=requests.get('http://localhost:8000/health', timeout=10); print('✅ Server responsive - Status:', r.status_code); print('Response:', r.json())\" 2>&1 || echo ❌ Health check failed - server may not be responding
          echo.
          echo === MANUAL CONNECTION TEST ===
          echo Testing external connectivity...
          python -c \"import requests; r=requests.get('http://127.0.0.1:8000/health', timeout=5); print('✅ Local connection OK')\" 2>&1 || echo ❌ Local connection failed
          echo.
          echo === DEPLOYMENT SUMMARY ===
          echo Server should be accessible at: http://${{ env.VPS_HOST }}:8000
          echo Health endpoint: http://${{ env.VPS_HOST }}:8000/health
          echo Web interface: http://${{ env.VPS_HOST }}:8000
          echo Local server log: server_output.log
          echo === END VERIFICATION ===
        "
