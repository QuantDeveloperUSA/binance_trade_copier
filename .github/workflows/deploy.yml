name: Deploy to Windows VPS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Windows VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        script: |
          # Stop existing application if running
          Get-Process -Name python -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*main.py*" } | Stop-Process -Force -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 3
          
          # Create deployment directory
          if (-not (Test-Path "C:\binance_copier")) {
            New-Item -ItemType Directory -Path "C:\binance_copier" -Force
            Write-Host "Created binance_copier directory"
          }
          
          Write-Host "Deployment directory ready"
          
    - name: Copy files to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        source: "*.py,*.txt,config.py,templates/*,data/*"
        target: "C:/binance_copier/"
        strip_components: 0
        
    - name: Install Dependencies and Start Application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        script: |
          cd C:\binance_copier
          
          # Verify Python installation
          if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
            Write-Error "Python is not installed or not in PATH"
            exit 1
          }
          
          Write-Host "Python version:"
          python --version
          
          # Create directories if they don't exist
          @("data", "templates") | ForEach-Object {
            if (-not (Test-Path $_)) {
              New-Item -ItemType Directory -Path $_ -Force
              Write-Host "Created directory: $_"
            }
          }
          
          # Install/upgrade dependencies
          Write-Host "Installing Python dependencies..."
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          
          # Start the application
          Write-Host "Starting Binance Trade Copier..."
          $process = Start-Process -FilePath "python" -ArgumentList "main.py" -WorkingDirectory "C:\binance_copier" -WindowStyle Hidden -PassThru
          
          if ($process) {
            Write-Host "Application started successfully with PID: $($process.Id)"
            
            # Wait and verify the process is still running
            Start-Sleep -Seconds 5
            if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
              Write-Host "Process verification successful - application is running"
            } else {
              Write-Error "Process died after startup"
              exit 1
            }
          } else {
            Write-Error "Failed to start application"
            exit 1
          }
          
    - name: Verify Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        script: |
          # Wait for application to fully initialize
          Start-Sleep -Seconds 10
          
          # Check if the process is still running
          $pythonProcess = Get-Process -Name python -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*main.py*" }
          
          if ($pythonProcess) {
            Write-Host "‚úì Application is running with PID: $($pythonProcess.Id)"
            
            # Try to test the health endpoint (if available)
            try {
              $response = Invoke-RestMethod -Uri "http://localhost:8000/health" -TimeoutSec 10 -ErrorAction Stop
              Write-Host "‚úì Health check passed:"
              Write-Host $response | ConvertTo-Json
            } catch {
              Write-Warning "Health endpoint not accessible, but application process is running"
              Write-Host "This might be normal if the app is still starting or uses a different port"
            }
            
            Write-Host "üöÄ Deployment completed successfully!"
          } else {
            Write-Error "‚ùå Application is not running"
            
            # Check for any Python errors in recent logs
            if (Test-Path "C:\binance_copier\binance_trade_copier.log") {
              Write-Host "Recent log entries:"
              Get-Content "C:\binance_copier\binance_trade_copier.log" -Tail 20
            }
            exit 1
          }
