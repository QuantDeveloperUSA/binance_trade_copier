name: Deploy to Windows VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual deployment

env:
  VPS_HOST: "5.181.5.168"
  VPS_USER: "trader"
  DEPLOY_PATH: "C:/trade_copier"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install sshpass and setup SSH
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Test SSH connection
      run: |
        echo "Testing SSH connection..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "echo 'SSH connection successful'"
        
    - name: Create deployment directory
      run: |
        echo "Creating deployment directory..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "if not exist ${{ env.DEPLOY_PATH }} mkdir ${{ env.DEPLOY_PATH }}"
        
    - name: Stop Python processes
      run: |
        echo "Stopping any running Python processes..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo Stopping all Python processes...
          taskkill /f /im python.exe 2>nul || echo No Python processes to kill
          taskkill /f /im pythonw.exe 2>nul || echo No Pythonw processes to kill
          timeout /t 3 /nobreak >nul
          echo Process cleanup completed
        "
        
    - name: Deploy all files
      run: |
        echo "Deploying all repository files..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' scp -o StrictHostKeyChecking=no -r ./* ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.DEPLOY_PATH }}/
        echo "File deployment completed"
        
    - name: Setup environment and install dependencies
      run: |
        echo "Setting up Python environment and installing dependencies..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=60 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_PATH }} || (echo Failed to change directory && exit 1)
          echo Current directory: %CD%
          echo.
          echo === PYTHON DIAGNOSTICS ===
          python --version || (echo Python not found && exit 1)
          where python || echo Python location not found
          echo.
          echo === FILE CHECK ===
          if exist main.py (
            echo ✅ main.py found
          ) else (
            echo ❌ main.py NOT found
            exit 1
          )
          if exist requirements.txt (
            echo ✅ requirements.txt found
          ) else (
            echo ❌ requirements.txt NOT found
            exit 1
          )
          echo.
          echo === DATA DIRECTORY SETUP ===
          if not exist data mkdir data
          if not exist data\\accounts.json echo {} > data\\accounts.json
          if not exist data\\trades.json echo [] > data\\trades.json  
          if not exist data\\system.json echo {\"copying_active\": false} > data\\system.json
          echo Data files created/verified
          echo.
          echo === DEPENDENCIES ===
          echo Installing Python dependencies...
          python -m pip install -r requirements.txt --upgrade || (
            echo ❌ Pip install failed
            exit 1
          )
          echo ✅ Dependencies installed successfully
          echo.
          echo === SYNTAX AND IMPORT CHECKS ===
          python -c \"import ast; ast.parse(open('main.py').read()); print('✅ Syntax OK')\" || (
            echo ❌ Syntax error in main.py
            exit 1
          )
          python -c \"import config, fastapi, uvicorn; print('✅ Core imports OK')\" || (
            echo ❌ Import test failed  
            exit 1
          )
          echo All checks passed successfully
        "
        
    - name: Start server
      run: |
        echo "Starting FastAPI server..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          echo === STARTING SERVER ===
          echo Starting FastAPI server in background...
          start /b cmd /c \"python main.py > server_output.log 2>&1\"
          echo Server start command issued
          echo Waiting 10 seconds for server startup...
          timeout /t 10 /nobreak >nul
          echo.
          echo === SERVER STATUS CHECK ===
          tasklist | findstr python.exe && echo ✅ Python process running || echo ❌ No Python process found
          echo.
          echo === SERVER OUTPUT ===
          if exist server_output.log (
            echo Server output log contents:
            type server_output.log
          ) else (
            echo No server output log found
          )
        "
        
    - name: Verify deployment and test server
      run: |
        echo "Final verification and server health check..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o ConnectTimeout=30 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_PATH }}
          echo === DEPLOYMENT VERIFICATION ===
          echo Directory contents:
          dir /b
          echo.
          echo === PYTHON PROCESSES ===
          tasklist | findstr python.exe && echo ✅ Python process found || echo ❌ No Python processes found
          echo.
          echo === CURRENT SERVER OUTPUT ===
          if exist server_output.log (
            echo Latest server output:
            type server_output.log | more
          ) else (
            echo No server output log found
          )
          echo.
          echo === HEALTH CHECK TEST ===
          echo Testing server health endpoint...
          python -c \"import requests; r=requests.get('http://localhost:8000/health', timeout=10); print('✅ Server responsive - Status:', r.status_code); print('Response:', r.json())\" 2>&1 || echo ❌ Health check failed - server may not be running
          echo.
          echo === DEPLOYMENT COMPLETE ===
          echo Server should be accessible at http://${{ env.VPS_HOST }}:8000
          echo Health endpoint: http://${{ env.VPS_HOST }}:8000/health
        "
