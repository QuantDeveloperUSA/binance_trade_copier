name: Deploy to Windows VPS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup WinRM Connection
      run: |
        # Install required tools
        sudo apt-get update
        sudo apt-get install -y python3-pip
        pip3 install pywinrm
        
    - name: Deploy via WinRM
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        cat > deploy_script.py << 'EOF'
        import winrm
        import os
        import sys
        import base64
        import zipfile
        import tempfile
        
        # Get credentials from environment
        host = os.environ['VPS_HOST']
        user = os.environ['VPS_USER'] 
        password = os.environ['VPS_PASSWORD']
        
        print(f"Connecting to {host} as {user}...")
        
        # Create WinRM session
        session = winrm.Session(f'http://{host}:5985/wsman', auth=(user, password))
        
        # Test connection
        result = session.run_cmd('echo "Connection test successful"')
        if result.status_code != 0:
            print(f"Connection failed: {result.std_err.decode()}")
            sys.exit(1)
        print("Connection established!")
        
        # Stop existing application
        print("Stopping existing application...")
        ps_script = """
        Get-Process -Name python -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*main.py*" } | ForEach-Object {
            Write-Host "Stopping process PID: $($_.Id)"
            Stop-Process -Id $_.Id -Force -ErrorAction SilentlyContinue
        }
        Start-Sleep -Seconds 3
        Write-Host "Existing processes stopped"
        """
        result = session.run_ps(ps_script)
        print(result.std_out.decode())
        
        # Create deployment directory
        print("Creating deployment directory...")
        ps_script = """
        if (-not (Test-Path "C:\\binance_copier")) {
            New-Item -ItemType Directory -Path "C:\\binance_copier" -Force
            Write-Host "Created binance_copier directory"
        } else {
            Write-Host "Directory already exists"
        }
        """
        result = session.run_ps(ps_script)
        print(result.std_out.decode())
        
        print("Deployment preparation completed!")
        EOF
        
        python3 deploy_script.py        
    - name: Copy Files via WinRM
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        cat > copy_files.py << 'EOF'
        import winrm
        import os
        import sys
        import base64
        import glob
        
        # Get credentials from environment
        host = os.environ['VPS_HOST']
        user = os.environ['VPS_USER'] 
        password = os.environ['VPS_PASSWORD']
        
        print("Copying files to VPS...")
        session = winrm.Session(f'http://{host}:5985/wsman', auth=(user, password))
        
        # Files to copy
        files_to_copy = [
            'main.py', 'config.py', 'requirements.txt', 'README.md'
        ]
        
        for file_path in files_to_copy:
            if os.path.exists(file_path):
                print(f"Copying {file_path}...")
                with open(file_path, 'rb') as f:
                    content = f.read()
                    encoded_content = base64.b64encode(content).decode()
                
                ps_script = f"""
                $content = [System.Convert]::FromBase64String('{encoded_content}')
                [System.IO.File]::WriteAllBytes('C:\\binance_copier\\{file_path}', $content)
                Write-Host "Copied {file_path}"
                """
                result = session.run_ps(ps_script)
                if result.status_code != 0:
                    print(f"Error copying {file_path}: {result.std_err.decode()}")
                else:
                    print(f"Successfully copied {file_path}")
        
        # Copy directories
        for dir_name in ['data', 'templates']:
            if os.path.exists(dir_name):
                print(f"Creating directory {dir_name}...")
                ps_script = f"""
                if (-not (Test-Path "C:\\binance_copier\\{dir_name}")) {{
                    New-Item -ItemType Directory -Path "C:\\binance_copier\\{dir_name}" -Force
                }}
                """
                session.run_ps(ps_script)
                
                # Copy files in directory
                for file_path in glob.glob(f"{dir_name}/*"):
                    if os.path.isfile(file_path):
                        print(f"Copying {file_path}...")
                        with open(file_path, 'rb') as f:
                            content = f.read()
                            encoded_content = base64.b64encode(content).decode()
                        
                        ps_script = f"""
                        $content = [System.Convert]::FromBase64String('{encoded_content}')
                        [System.IO.File]::WriteAllBytes('C:\\binance_copier\\{file_path.replace('/', '\\\\')}', $content)
                        """
                        session.run_ps(ps_script)
        
        print("File copy completed!")
        EOF
        
        python3 copy_files.py
        
    - name: Install Dependencies and Start Application
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        cat > start_app.py << 'EOF'
        import winrm
        import os
        import sys
        import time
        
        # Get credentials from environment
        host = os.environ['VPS_HOST']
        user = os.environ['VPS_USER'] 
        password = os.environ['VPS_PASSWORD']
        
        print("Starting application deployment...")
        session = winrm.Session(f'http://{host}:5985/wsman', auth=(user, password))
        
        # Install dependencies and start application
        ps_script = """
        cd C:\\binance_copier
        
        # Check Python
        if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
            Write-Error "Python is not installed or not in PATH"
            exit 1
        }
        
        Write-Host "Python version:"
        python --version
        
        # Create directories
        @("data", "templates") | ForEach-Object {
            if (-not (Test-Path $_)) {
                New-Item -ItemType Directory -Path $_ -Force
                Write-Host "Created directory: $_"
            }
        }
        
        # Install dependencies
        Write-Host "Installing Python dependencies..."
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        
        # Start the application
        Write-Host "Starting Binance Trade Copier..."
        $process = Start-Process -FilePath "python" -ArgumentList "main.py" -WorkingDirectory "C:\\binance_copier" -WindowStyle Hidden -PassThru
        
        if ($process) {
            Write-Host "Application started successfully with PID: $($process.Id)"
            Start-Sleep -Seconds 5
            
            if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
                Write-Host "✓ Process verification successful - application is running"
            } else {
                Write-Error "Process died after startup"
                exit 1
            }
        } else {
            Write-Error "Failed to start application"
            exit 1
        }
        """
        
        result = session.run_ps(ps_script)
        print("STDOUT:", result.std_out.decode())
        if result.std_err:
            print("STDERR:", result.std_err.decode())
        
        if result.status_code != 0:
            print("Deployment failed!")
            sys.exit(1)
        else:
            print("Application started successfully!")
        EOF
        
        python3 start_app.py
        
    - name: Verify Deployment
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
      run: |
        cat > verify_deployment.py << 'EOF'
        import winrm
        import os
        import sys
        import time
        
        # Get credentials from environment
        host = os.environ['VPS_HOST']
        user = os.environ['VPS_USER'] 
        password = os.environ['VPS_PASSWORD']
        
        print("Verifying deployment...")
        session = winrm.Session(f'http://{host}:5985/wsman', auth=(user, password))
        
        # Wait for app to fully start
        time.sleep(10)
        
        # Verify deployment
        ps_script = """
        # Check if process is running
        $pythonProcess = Get-Process -Name python -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*main.py*" }
        
        if ($pythonProcess) {
            Write-Host "✓ Application is running with PID: $($pythonProcess.Id)"
            
            # Try health check
            try {
                $response = Invoke-RestMethod -Uri "http://localhost:8000/health" -TimeoutSec 10 -ErrorAction Stop
                Write-Host "✓ Health check passed:"
                Write-Host ($response | ConvertTo-Json)
            } catch {
                Write-Warning "Health endpoint not accessible, but application process is running"
                Write-Host "This might be normal if the app is still starting or uses a different port"
            }
            
            Write-Host "🚀 Deployment completed successfully!"
        } else {
            Write-Error "❌ Application is not running"
            
            # Check logs
            if (Test-Path "C:\\binance_copier\\binance_trade_copier.log") {
                Write-Host "Recent log entries:"
                Get-Content "C:\\binance_copier\\binance_trade_copier.log" -Tail 20
            }
            exit 1
        }
        """
        
        result = session.run_ps(ps_script)
        print("STDOUT:", result.std_out.decode())
        if result.std_err:
            print("STDERR:", result.std_err.decode())
        
        if result.status_code == 0:
            print("✅ Deployment verification successful!")
        else:
            print("❌ Deployment verification failed!")
            sys.exit(1)
        EOF
        
        python3 verify_deployment.py
