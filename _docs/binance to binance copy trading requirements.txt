pip-requirements
**BINANCE TO BINANCE COPY TRADING SYSTEM**

**SPECIFICATIONS**

**Exchange Integration**

- Platform: Binance Global (Not Binance US) 
- API to use : (Futures API, to trade symbols like BTCUSDT, ETHUSDT, etc.)
- Copy Type: Binance-to-Binance only
- Latency: Must be as low as technically possible since all trades are within the same exchange.

**Key Features**

1. **Hedging Support**

   - Support for opening both long and short positions on the same pair (where applicable).

2. **Cross Margin Support**

   - Full compatibility with Binance s Cross Margin mode.

3. **Customizable Risk Management**

   - Support for the following modes:
   - **Balance Multiplier**: Trades are scaled based on the ratio between master and slave balances.
     - Example: If Master = $1000, Slave = $2000 → Slave receives 2x the position size.
   - **Fixed Copy Ratio**: Option to set a static copy ratio (e.g., 0.5x, 1x, 2x) per slave.

4. **Position Management**

   - Must support copying of:
     - **Scaling In**: Adding to an existing position.
     - **Scaling Out**: Reducing an existing position.
   - ALL actions taken by the master (entry, increase, decrease, close) must be mirrored on the slaves proportionally to the account balances and in real-time.
   - The trade size will be calculated proportional to the balance size of each account, and the user will have a multiplier to config in the UI, that is set to 1 as default

5. **Multiple Slave Accounts**

   - One master account can support up to **20** slave accounts simultaneously. (For now, to be scaled in future i.e., 100)
   - Each slave should be individually configurable with risk settings.

6. **Scalability**

   - The system should be built with future scalability in mind. Once this initial system is working, I plan to upgrade it to a larger version of the project I sent you earlier.

**Acceptance Criteria**

The project will be considered complete when the following are achieved:

1. Trades from the master are replicated to slaves in real time with minimum latency.
2. System supports cross margin and hedging modes as defined.
3. Balance multiplier and fixed copy ratio options function correctly per slave account.
4. Scaling in and out of positions is accurately mirrored.
5. Secure handling and encryption of API keys is implemented.
6. The system reliably supports 20 simultaneous slave accounts.
7. Architecture allows for easy scalability and future upgrades.
8. A front-end or CRM tool is provided to monitor and control master/slave configurations.
9. Notifications/logs in case of errors



Engineer Notes:
- Ensure all API calls are rate-limited to avoid hitting Binance s API limits.
- Consider implementing a retry mechanism for failed API calls.
- Monitor the performance of the system and optimize as needed.
- Use a robust logging system to track all trades and actions taken by the master and slaves.
- Implement a user-friendly for managing accounts and settings. 
   - Separate interface for admin, and users.
- All the interfaces are going to be web interfaces.
- We are going to use Python 3.12
- We are using Windows 11 for development and testing.


Opus 4 Notes:

## SIMPLIFIED IMPLEMENTATION PLAN

### Tech Stack (Minimal)
- **Backend**: Python 3.12 + FastAPI (simple REST API)
- **Storage**: JSON files (no database setup required)
- **Frontend**: Single HTML page with vanilla JavaScript
- **No Redis, No Celery, No Database, No Complex Architecture**

### Core Implementation (4 Files Total)

#### 1. main.py - The Entire Backend
```python
# Single file FastAPI app
# - Binance WebSocket monitoring
# - Trade copying logic
# - JSON file storage for accounts and trades
# - Basic web endpoints
```

#### 2. index.html - Simple Web Interface
```html
<!-- Single page with:
- Add master/slave accounts
- View active accounts, balance, and status
- Start/stop copying
- Basic trade logs -->
```

#### 3. config.py - Settings
```python
# API rate limits
# Encryption key
# File paths for JSON storage
```

#### 4. accounts.json - Initial Account Data
```json
{
  "accounts": [
    {
      "id": "master_1",
      "type": "master",
      "api_key": "DKYdB1PYBsL3yCCNCwHykREcgis8cNaWZgzwsTsH2IUpq7DyQj2VFoxMpUfbvvOJ",
      "api_secret": "Q36SYeHWt3JE1RqM1qq1vQKkTQa5c5VCd9Xi9uVb2e0MVyavYkl5jXuTxWfBPjpZ",
      "active": true
    },
    {
      "id": "slave_1",
      "type": "slave",
      "api_key": "ZsPmFPkk8Vre0rV0QxMFffJb7iZsSEOdhy8JABX9uy2XVBDKB2rROyABrhowXB3f",
      "api_secret": "rkISplxseErKCibc3Uxx3VoERGJxyIMz0dd48GAh38Exw07jXfUFEuG9ow8zkdRw",
      "multiplier": 1.0,
      "active": true
    }
  ]
}
```

### Simplified Storage (JSON Files)
```
data/
├── accounts.json    # Master and slave accounts
├── trades.json      # Trade history
└── system.json      # System state (copying active/inactive)
```

### Implementation Steps (1-2 Days)

#### Day 1: Core Functionality
1. **Binance Connection** (2 hours)
   - Simple websocket client using `python-binance`
   - Monitor user data stream for trades

2. **Copy Logic** (2 hours)
   - When master trades → calculate slave sizes
   - Place orders using REST API
   - Save trade history to trades.json

3. **Data Storage** (30 minutes)
   - Simple JSON file read/write
   - No database setup needed

#### Day 2: Web Interface
1. **API Endpoints** (2 hours)
   - POST /accounts (add master/slave)
   - GET /accounts (list all)
   - POST /start (begin copying)
   - GET /trades (recent history)

2. **Simple UI** (2 hours)
   - Bootstrap for styling
   - Forms to add accounts
   - Table to show accounts/trades
   - Start/Stop button

### Key Simplifications

1. **No Database**
   - JSON files for all storage
   - Direct file access from frontend
   - No SQL, no ORM

2. **Basic Security**
   - Basic password for web access
   - No complex authentication

3. **Minimal Features**
   - Balance multiplier only (no fixed ratio)
   - Market orders only (no limit orders)
   - No hedging logic initially

4. **Simple Deployment**
   - Run with `uvicorn main:app`
   - Single server deployment
   - No Docker, no Kubernetes

### Code Structure
```
project/
├── main.py          # Everything backend
├── config.py        # Settings
├── templates/
│   └── index.html   # Single page UI
├── data/
│   ├── accounts.json # Account storage
│   ├── trades.json   # Trade history
│   └── system.json   # System state
├── requirements.txt  # FastAPI, python-binance, cryptography
├── Run_Server.bat  # Windows batch file to start server by double clicking on it
└── README.md         # Project overview and setup instructions
```

### Critical Code Snippets

#### WebSocket Monitoring (Simplified)
```python
async def monitor_master(api_key, api_secret):
    client = AsyncClient(api_key, api_secret)
    bm = BinanceSocketManager(client)
    async with bm.user_socket() as stream:
        while True:
            msg = await stream.recv()
            if msg['e'] == 'executionReport':
                await copy_to_slaves(msg)
```

#### Position Sizing (Simple)
```python
def calculate_slave_quantity(master_qty, master_balance, slave_balance, multiplier):
    return (master_qty * slave_balance / master_balance) * multiplier
```

#### File Operations (Simple)
```python
import json

def load_accounts():
    with open('data/accounts.json', 'r') as f:
        return json.load(f)

def save_trade(trade_data):
    with open('data/trades.json', 'r+') as f:
        trades = json.load(f)
        trades['trades'].append(trade_data)
        f.seek(0)
        json.dump(trades, f, indent=2)
```

### What We're NOT Doing
- No database of any kind
- No Redis caching
- No Celery queues  
- No React frontend
- No complex authentication
- No microservices
- No monitoring stack
- No load balancing
- No unit tests initially

### Delivery Timeline
- Day 1: Core copying functionality
- Day 2: Web interface
- Day 3: Testing and bug fixes

This approach gets a working system quickly that can be enhanced later.

User notes:
- The default credentials for the first 2 accounts are already included in accounts.json
- Master API: DKYdB1PYBsL3yCCNCwHykREcgis8cNaWZgzwsTsH2IUpq7DyQj2VFoxMpUfbvvOJ
- Slave API: ZsPmFPkk8Vre0rV0QxMFffJb7iZsSEOdhy8JABX9uy2XVBDKB2rROyABrhowXB3f
